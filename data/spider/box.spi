; author: jochen ismer
vm
echo "BOX:SPI"
;roation einarbeiten? eigentlich nciht weil map und pdb j aübereinsstimmen sollen
;Die Stemkoordinaten aus dem File auslesen
UD IC 1,[x1],[y1],[z1],[x2],[y2],[z2],[anzahlas],[ps],[rs]
${var_name}
;EIngabefile muss gleich auch noch übergeben werden
;Pixelsize der Eingabemap (evtl vom user abfragen)
;[ps]=1.26
[psf]=1/[ps]
[file]='${map_name}'
FI [x8],[x9],[x10]
[file]
1,2,12

;PDB Koordinaten auf Pixelsize anpassen
[x1]=[x1]*[psf]
[x2]=[x2]*[psf]
[y1]=[y1]*[psf]
[y2]=[y2]*[psf]
[z1]=[z1]*[psf]
[z2]=[z2]*[psf]
[ass]=8*[psf]
;boxsize shift (weil der ursprung woander sitzt
[sx]=([x8]/2)+1
[sy]=([x9]/2)+1
[sz]=([x10]/2)+1
;Den Abstand der Stems ausrechen
[abstand]=(SQR(([x1]-[x2])**2+([y1]-[y2])**2+([z1]-[z2])**2))


;minimimale dimension der box, evtl noch durch 2 teilen
[dim]=INT((([anzahlas]*[ass])/2)-[abstand])



;mittelpunkt zwischen den beiden stems ausrechnen
[x3]=([x1]+[x2])/2
[y3]=([y1]+[y2])/2
[z3]=([z1]+[z2])/2
;für das ausschneiden der unrotierten box brauchen wir noch ein z4 aus den neg z werten
[z4]=(((-1*[z1])+(-1*[z2]))/2)
vm
 echo [z4] is now= {%F7.4%[z4]}
;wenn der ausschlag (dim) des loops grösser ist als der abstand der stems dann den nehmen um ecke und boxgröße zu berechnen
IF ([dim].GT.[abstand]) THEN
	[hb]=[dim]/2
	[obenlinks1]=INT([x3]+[sx]-[hb])
	[obenlinks2]=INT([y3]+[sy]-[hb])
	[obenlinks3]=INT([z3]+[sz]-[hb])
	[obenlinks4]=INT([z4]+[sz]-[hb])
	wi 
	[file]
	boxil
	[dim] [dim] [dim]
	[obenlinks1] [obenlinks2] [obenlinks3]
	sd 1,[dim] [obenlinks1] [obenlinks2] [obenlinks3] [obenlinks4] [ps] [rs]
	ergebnisse
	vm 
	echo {%F7.4%[obenlinks4]}
ELSE
	[hb]=[abstand]/2
	[obenlinks1]=INT([x3]+[sx]-[hb])
	[obenlinks2]=INT([y3]+[sy]-[hb])
	[obenlinks3]=INT([z3]+[sz]-[hb])
	[obenlinks4]=INT([z4]+[sz]-[hb])
	wi 
	[file]
	boxil
	[abstand] [abstand] [abstand]
	[obenlinks1] [obenlinks2] [obenlinks3]
	sd 1,[abstand] [obenlinks1] [obenlinks2] [obenlinks3] [obenlinks4] [ps] [rs]
	ergebnisse
	vm 
	echo abstand
ENDIF
vm 
echo hallo

vm
rm results*
en 
